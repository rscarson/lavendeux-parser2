SCRIPT = {LINE+}

LINE = {
    EXPRESSION ~ EOL
    | EXPRESSION ~ "@" ~ identifier ~ EOL
    | EOL
}

EXPRESSION = {
    FUNCTION_ASSIGNMENT_EXPRESSION | INDEX_ASSIGNMENT_EXPRESSION | ASSIGNMENT_EXPRESSION
    | TOPLEVEL_EXPRESSION
}

//
// Tokenizer configuration
//

//COMMENT = _{"//" ~ (!eol ~ ANY)* | "/*" ~ (!eol ~ !"*/" ~ ANY)* ~ "*/"}
WHITESPACE = _{" " | "\t" | "\\\n"}
EOL = _{EOI | NEWLINE | ";"}

// 
// Assignment expressions
// 

FUNCTION_ASSIGNMENT_EXPRESSION = {
    identifier ~ "(" ~ ")" ~ "=" ~ TOPLEVEL_EXPRESSION |
    identifier ~ "(" ~ identifier ~ ("," ~ identifier)* ~ ")" ~ "=" ~ TOPLEVEL_EXPRESSION
}

ASSIGNMENT_EXPRESSION = {identifier ~ "=" ~ TOPLEVEL_EXPRESSION}

INDEX_ASSIGNMENT_EXPRESSION = {identifier ~ ("[" ~ TOPLEVEL_EXPRESSION ~ "]")+ ~ "=" ~ TOPLEVEL_EXPRESSION}

//
// Top of expression tree
//

TOPLEVEL_EXPRESSION = { TERNARY_EXPRESSION }

//
// Flow control expressions
//

TERNARY_EXPRESSION = {
    BOOLEAN_OR_EXPRESSION ~ "?" ~ BOOLEAN_OR_EXPRESSION ~ ":" ~ TERNARY_EXPRESSION
    | BOOLEAN_OR_EXPRESSION ~ "?" ~ BOOLEAN_OR_EXPRESSION ~ ":" ~ BOOLEAN_OR_EXPRESSION
    | SKIP_TERNARY_EXPRESSION
}
SKIP_TERNARY_EXPRESSION = {BOOLEAN_OR_EXPRESSION}

//
// Boolean infix expressions
//

BOOLEAN_OR_EXPRESSION = {
    BOOLEAN_AND_EXPRESSION ~ "||" ~ BOOLEAN_OR_EXPRESSION
    | BOOLEAN_AND_EXPRESSION ~ "||" ~ BOOLEAN_AND_EXPRESSION
    | SKIP_BOOLEAN_OR_EXPRESSION
}
SKIP_BOOLEAN_OR_EXPRESSION = {BOOLEAN_AND_EXPRESSION}

BOOLEAN_AND_EXPRESSION = {
    BOOLEAN_CMP_EXPRESSION ~ "&&" ~ BOOLEAN_AND_EXPRESSION
    | BOOLEAN_CMP_EXPRESSION ~ "&&" ~ BOOLEAN_CMP_EXPRESSION
    | SKIP_BOOLEAN_AND_EXPRESSION
}
SKIP_BOOLEAN_AND_EXPRESSION = {BOOLEAN_CMP_EXPRESSION}

BOOLEAN_CMP_OPERATOR = {"<" | ">" | "<=" | ">=" | "==" | "!="}
BOOLEAN_CMP_EXPRESSION = {
    BITWISE_OR_EXPRESSION ~ BOOLEAN_CMP_OPERATOR ~ BOOLEAN_CMP_EXPRESSION
    | BITWISE_OR_EXPRESSION ~ BOOLEAN_CMP_OPERATOR ~ BITWISE_OR_EXPRESSION
    | SKIP_BOOLEAN_CMP_EXPRESSION
}
SKIP_BOOLEAN_CMP_EXPRESSION = {BITWISE_OR_EXPRESSION}

//
// Bitwise infix expressions
//

BITWISE_OR_EXPRESSION = {
    BITWISE_XOR_EXPRESSION ~ "|" ~ BITWISE_OR_EXPRESSION
    | BITWISE_XOR_EXPRESSION ~ "|" ~ BITWISE_XOR_EXPRESSION
    | SKIP_BITWISE_OR_EXPRESSION
}
SKIP_BITWISE_OR_EXPRESSION = {BITWISE_XOR_EXPRESSION}

BITWISE_XOR_EXPRESSION = {
    BITWISE_AND_EXPRESSION ~ "^" ~ BITWISE_XOR_EXPRESSION
    | BITWISE_AND_EXPRESSION ~ "^" ~ BITWISE_AND_EXPRESSION
    | SKIP_BITWISE_XOR_EXPRESSION
}
SKIP_BITWISE_XOR_EXPRESSION = {BITWISE_AND_EXPRESSION}

BITWISE_AND_EXPRESSION = {
    BITWISE_SHIFT_EXPRESSION ~ "&" ~ BITWISE_AND_EXPRESSION
    | BITWISE_SHIFT_EXPRESSION ~ "&" ~ BITWISE_SHIFT_EXPRESSION
    | SKIP_BITWISE_AND_EXPRESSION
}
SKIP_BITWISE_AND_EXPRESSION = {BITWISE_SHIFT_EXPRESSION}

BITWISE_SHIFT_OPERATOR = {"<<" | ">>"}
BITWISE_SHIFT_EXPRESSION = {
    ARITHMETIC_AS_EXPRESSION ~ BITWISE_SHIFT_OPERATOR ~ BITWISE_SHIFT_EXPRESSION
    | ARITHMETIC_AS_EXPRESSION ~ BITWISE_SHIFT_OPERATOR ~ ARITHMETIC_AS_EXPRESSION
    | SKIP_BITWISE_SHIFT_EXPRESSION
}
SKIP_BITWISE_SHIFT_EXPRESSION = {ARITHMETIC_AS_EXPRESSION}

//
// Arithmetic infix expressions
//

ARITHMETIC_AS_OPERATOR = {"+" | "-"}
ARITHMETIC_AS_EXPRESSION = {
    ARITHMETIC_MD_EXPRESSION ~ ARITHMETIC_AS_OPERATOR ~ ARITHMETIC_AS_EXPRESSION
    | ARITHMETIC_MD_EXPRESSION ~ ARITHMETIC_AS_OPERATOR ~ ARITHMETIC_MD_EXPRESSION
    | SKIP_ARITHMETIC_AS_EXPRESSION
}
SKIP_ARITHMETIC_AS_EXPRESSION = {ARITHMETIC_MD_EXPRESSION}

ARITHMETIC_MD_OPERATOR = {"*" | "/" | "%"}
ARITHMETIC_MD_EXPRESSION = {
    ARITHMETIC_IMPLICIT_MUL_EXPRESSION ~ ARITHMETIC_MD_OPERATOR ~ ARITHMETIC_MD_EXPRESSION
    | ARITHMETIC_IMPLICIT_MUL_EXPRESSION ~ ARITHMETIC_MD_OPERATOR ~ ARITHMETIC_IMPLICIT_MUL_EXPRESSION
    | SKIP_ARITHMETIC_MD_EXPRESSION
}
SKIP_ARITHMETIC_MD_EXPRESSION = {ARITHMETIC_IMPLICIT_MUL_EXPRESSION}

ARITHMETIC_IMPLICIT_MUL_EXPRESSION = {
    ARITHMETIC_EXPONENTIATION_EXPRESSION ~ (!"-" ~ ARITHMETIC_IMPLICIT_MUL_EXPRESSION)
    | ARITHMETIC_EXPONENTIATION_EXPRESSION ~ (!"-" ~ ARITHMETIC_EXPONENTIATION_EXPRESSION)
    | SKIP_ARITHMETIC_IMPLICIT_MUL_EXPRESSION
}
SKIP_ARITHMETIC_IMPLICIT_MUL_EXPRESSION = {ARITHMETIC_EXPONENTIATION_EXPRESSION}

ARITHMETIC_EXPONENTIATION_EXPRESSION = {
    FUNCTION_CALL_EXPRESSION ~ "**" ~ ARITHMETIC_EXPONENTIATION_EXPRESSION
    | FUNCTION_CALL_EXPRESSION ~ "**" ~ FUNCTION_CALL_EXPRESSION
    | SKIP_ARITHMETIC_EXPONENTIATION_EXPRESSION
}
SKIP_ARITHMETIC_EXPONENTIATION_EXPRESSION = {FUNCTION_CALL_EXPRESSION}

//
// Function call stuff
// 

FUNCTION_CALL_EXPRESSION = {
    identifier ~ "(" ~ ")" |
    identifier ~ "(" ~ TOPLEVEL_EXPRESSION ~ ("," ~ TOPLEVEL_EXPRESSION)* ~ ")"
    | SKIP_FUNCTION_CALL_EXPRESSION
}
SKIP_FUNCTION_CALL_EXPRESSION = {BOOLEAN_NOT_EXPRESSION}

//
// Prefix unary expressions
//

BOOLEAN_NOT_EXPRESSION = {
    "!" ~ BITWISE_NOT_EXPRESSION
    | "!" ~ BOOLEAN_NOT_EXPRESSION
    | SKIP_BOOLEAN_NOT_EXPRESSION
}
SKIP_BOOLEAN_NOT_EXPRESSION = {BITWISE_NOT_EXPRESSION}

BITWISE_NOT_EXPRESSION = {
    "~" ~ ARITHMETIC_NEG_EXPRESSION
    | "~" ~ BITWISE_NOT_EXPRESSION
    | SKIP_BITWISE_NOT_EXPRESSION
}
SKIP_BITWISE_NOT_EXPRESSION = {ARITHMETIC_NEG_EXPRESSION}

ARITHMETIC_NEG_EXPRESSION = {
    "-" ~ INDEXING_EXPRESSION
    | "-" ~ ARITHMETIC_NEG_EXPRESSION
    | SKIP_ARITHMETIC_NEG_EXPRESSION
}
SKIP_ARITHMETIC_NEG_EXPRESSION = {INDEXING_EXPRESSION}

//
// Postfix indexing expression - for arrays and objects
//

INDEXING_EXPRESSION = {
    TERM ~ ("[" ~ TOPLEVEL_EXPRESSION ~ "]")+ 
    | SKIP_INDEXING_EXPRESSION
}
SKIP_INDEXING_EXPRESSION = {TERM}

//
// Value Literals
// And value-literal adjascent gubbins
// 

TERM = {"(" ~ TOPLEVEL_EXPRESSION ~ ")" | ATOMIC_VALUE}

ATOMIC_VALUE = {
    currency_literal |
    int_literal | hex_literal | bin_literal | oct_literal |
    float_literal | sci_literal |
    bool_literal | string_literal |
    identifier
}

// Fixed-point currency values
currency_symbol = @{"$" | "€" | "£" | "¥"}
currency_literal = {((float_literal | int_literal) ~ currency_symbol) | (currency_symbol ~ (float_literal | int_literal))}

// Floating-point literals
sci_literal = @{(float_literal | int_literal) ~ ^"e" ~ ("+"|"-")? ~ ('0'..'9')+}
float_literal = @{int_literal? ~ "." ~ ('0'..'9')+}

// Integer literals
int_literal = @{('0'..'9'){4,} | (('0'..'9'){1,3} ~ ("," ~ ('0'..'9'){3})*)}
hex_literal = @{(^"0x") ~ ('a'..'f' | 'A'..'F' | '0'..'9')+}
bin_literal = @{(^"0b") ~ ('0'..'1')+}
oct_literal = @{(^"0o" | "0") ~ ('0'..'7')+}    

// Other literals
bool_literal = @{^"true" | ^"false"}
string_literal = @{("\"" ~ ("\\"~ANY | (!"\"" ~ ANY))* ~ "\"") | ("\'" ~ ("\\"~ANY | (!"\'" ~ ANY))* ~ "\'")}

identifier = @{('a'..'z' | 'A'..'Z' | "_") ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")*}