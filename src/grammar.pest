//
// Lavendeux Parser Grammar Definition
// Copyright Richard Carson, 2023
//

SCRIPT = {
    LINE* ~ EOI
}

LINE = {
    WHITESPACE* ~ STATEMENT ~ "@" ~ identifier ~ (EOL | &EOI)
    | WHITESPACE* ~ STATEMENT ~ (EOL | &EOI)
    | WHITESPACE* ~ (EOL | INLINE_COMMENT)
}

STATEMENT = _{
    FUNCTION_ASSIGNMENT_STATEMENT | INDEX_ASSIGNMENT_STATEMENT | VARIABLE_ASSIGNMENT_STATEMENT | DESTRUCTURING_ASSIGNMENT_STATEMENT
    | TOPLEVEL_EXPRESSION
}

//
// Tokenizer configuration
//

INLINE_COMMENT = @{"//" ~ (!EOL ~ ANY)* ~ (&EOL | &EOI)}
BLOCK_COMMENT = @{"/*" ~ (!"*/" ~ ANY)* ~ "*/"}
COMMENT = _{INLINE_COMMENT | BLOCK_COMMENT}

WHITESPACE = _{" " | "\t" | "\\" ~ EOL | COMMENT}
EOL = _{NEWLINE | ";"}

// 
// Assignment expressions
// 

FUNCTION_ASSIGNMENT_STATEMENT = {
    identifier ~ "(" ~ ")" ~ "=" ~ TOPLEVEL_EXPRESSION |
    identifier ~ "(" ~ identifier ~ ("," ~ identifier)* ~ ")" ~ "=" ~ TOPLEVEL_EXPRESSION
}

VARIABLE_ASSIGNMENT_STATEMENT = {identifier ~ "=" ~ TOPLEVEL_EXPRESSION}

DESTRUCTURING_ASSIGNMENT_STATEMENT = {
    "(" ~ identifier ~ ("," ~ identifier)* ~ ")" ~ "=" ~ TOPLEVEL_EXPRESSION
}

INDEX_ASSIGNMENT_STATEMENT = {
    identifier ~ ("[" ~ TOPLEVEL_EXPRESSION ~ "]")+ ~ "=" ~ TOPLEVEL_EXPRESSION
}

//
// Top of expression tree
//

TOPLEVEL_EXPRESSION = _{ 
    TERNARY_EXPRESSION
}

//
// Flow control expressions
//

TERNARY_EXPRESSION = {
    IF_EXPRESSION ~ ("?" ~ IF_EXPRESSION ~ ":" ~ IF_EXPRESSION)*
}

IF_EXPRESSION = {
    ("if" ~ FOR_LOOP_EXPRESSION ~ "then" ~ FOR_LOOP_EXPRESSION ~ "else")* ~ FOR_LOOP_EXPRESSION
}

FOR_LOOP_EXPRESSION = {
    ("for" ~ (identifier ~ "in")? ~ BOOLEAN_OR_EXPRESSION ~ "do")? ~ BOOLEAN_OR_EXPRESSION
}

//
// Boolean infix expressions
//

BOOLEAN_OR_OPERATOR = {"||"}
BOOLEAN_OR_EXPRESSION = {
    BOOLEAN_AND_EXPRESSION ~ (BOOLEAN_OR_OPERATOR ~ BOOLEAN_AND_EXPRESSION)*
}

BOOLEAN_AND_OPERATOR = {"&&"}
BOOLEAN_AND_EXPRESSION = {
    BOOLEAN_CMP_EXPRESSION ~ (BOOLEAN_AND_OPERATOR ~ BOOLEAN_CMP_EXPRESSION)*
}

BOOLEAN_CMP_OPERATOR = {"<=" | ">=" | "==" | "!=" | "<" | ">"}
BOOLEAN_CMP_EXPRESSION = {
    BITWISE_OR_EXPRESSION ~ (BOOLEAN_CMP_OPERATOR ~ BITWISE_OR_EXPRESSION)*
}

//
// Bitwise infix expressions
//

BITWISE_OR_OPERATOR = {"|" | "^"}
BITWISE_OR_EXPRESSION = {
    BITWISE_XOR_EXPRESSION ~ (BITWISE_OR_OPERATOR ~ BITWISE_XOR_EXPRESSION)*
}

BITWISE_XOR_OPERATOR = {"^"}
BITWISE_XOR_EXPRESSION = {
    BITWISE_AND_EXPRESSION ~ (BITWISE_XOR_OPERATOR ~ BITWISE_AND_EXPRESSION)*
}

BITWISE_AND_OPERATOR = {"&"}
BITWISE_AND_EXPRESSION = {
    BITWISE_SHIFT_EXPRESSION ~ (BITWISE_AND_OPERATOR ~ BITWISE_SHIFT_EXPRESSION)*
}

BITWISE_SHIFT_OPERATOR = {"<<" | ">>"}
BITWISE_SHIFT_EXPRESSION = {
    ARITHMETIC_AS_EXPRESSION ~ (BITWISE_SHIFT_OPERATOR ~ ARITHMETIC_AS_EXPRESSION)*
}

//
// Arithmetic infix expressions
//

ARITHMETIC_AS_OPERATOR = {"+" | "-"}
ARITHMETIC_AS_EXPRESSION = {
    ARITHMETIC_MD_EXPRESSION ~ (ARITHMETIC_AS_OPERATOR ~ ARITHMETIC_MD_EXPRESSION)*
}

ARITHMETIC_MD_OPERATOR = {"*" | "/" | "%"}
ARITHMETIC_MD_EXPRESSION = {
    ARITHMETIC_IMPLICIT_MUL_EXPRESSION ~ (ARITHMETIC_MD_OPERATOR ~ ARITHMETIC_IMPLICIT_MUL_EXPRESSION)*
}

ARITHMETIC_IMPLICIT_MUL_EXPRESSION = {
    ARITHMETIC_EXPONENTIATION_EXPRESSION ~ (!"-" ~ ARITHMETIC_EXPONENTIATION_EXPRESSION)*
}

ARITHMETIC_EXPONENTIATION_OPERATOR = {"**"}
ARITHMETIC_EXPONENTIATION_EXPRESSION = {
    MATCHING_EXPRESSION ~ (ARITHMETIC_EXPONENTIATION_OPERATOR ~ MATCHING_EXPRESSION)*
}

//
// Ranges and casting
//

MATCHING_OPERATOR = {"contains" | "matches" | "is" | "startswith" | "endswith" | "starts_with" | "ends_with"}
MATCHING_EXPRESSION = {
    RANGE_EXPRESSION ~ (MATCHING_OPERATOR ~ RANGE_EXPRESSION)?
}


RANGE_OPERATOR = {".."}
RANGE_EXPRESSION = {
    CASTING_EXPRESSION ~ (RANGE_OPERATOR ~ CASTING_EXPRESSION)?
}

TARGET_TYPE = @{identifier}
CASTING_EXPRESSION = {
    DELETE_EXPRESSION ~ ("as" ~ TARGET_TYPE)?
}

DELETE_KEYWORD = {"delete" | "del" | "unset"}
DELETE_EXPRESSION = {
    DELETE_KEYWORD ~ identifier ~ ("[" ~ FUNCTION_CALL_EXPRESSION ~ "]")*
    | FUNCTION_CALL_EXPRESSION
}

//
// Function call stuff
// 

FUNCTION_START_MARKER = {"("}
FUNCTION_CALL_EXPRESSION = {
    identifier ~ FUNCTION_START_MARKER ~ ")" |
    identifier ~ FUNCTION_START_MARKER ~ TOPLEVEL_EXPRESSION ~ ("," ~ TOPLEVEL_EXPRESSION)* ~ ")"
    | BOOLEAN_NOT_EXPRESSION
}

//
// Prefix unary expressions
//

BOOLEAN_NOT_OPERATOR = {"!"}
BOOLEAN_NOT_EXPRESSION = {
    BOOLEAN_NOT_OPERATOR* ~ BITWISE_NOT_EXPRESSION
}

BITWISE_NOT_OPERATOR = {"~"}
BITWISE_NOT_EXPRESSION = {
    BITWISE_NOT_OPERATOR* ~ ARITHMETIC_NEG_EXPRESSION
}

ARITHMETIC_NEG_OPERATOR = {"-"}
ARITHMETIC_NEG_EXPRESSION = {
    ARITHMETIC_NEG_OPERATOR* ~ INDEXING_EXPRESSION
}

//
// Postfix indexing expression - for arrays and objects
//

INDEXING_EXPRESSION = {
    TERM ~ ("[" ~ TOPLEVEL_EXPRESSION ~ "]")*
}

//
// Value Literals
// And value-literal adjascent gubbins
// 

TERM = _{
    | "(" ~ TOPLEVEL_EXPRESSION ~ ")"
    | ATOMIC_VALUE
}

ATOMIC_VALUE = _{
    currency_literal | fixed_literal
    | sci_literal | float_literal
    | hex_literal | bin_literal | oct_literal | int_literal
    | bool_literal | string_literal | regex_literal
    | array_literal | object_literal
    | const_literal
    | identifier
    | errors
}

array_literal = {
    "[" ~ TOPLEVEL_EXPRESSION ~ ("," ~ TOPLEVEL_EXPRESSION)* ~ "]"
    | "[" ~ "]"
}

object_literal_pair = _{TOPLEVEL_EXPRESSION ~ ":" ~ TOPLEVEL_EXPRESSION}
object_literal = {
    "{" ~ object_literal_pair ~ ("," ~ object_literal_pair)* ~ "}"
    | "{" ~ "}"
}

fixed_literal = @{
    ('0'..'9')+ ~ ("." ~ ('0'..'9')+)? ~ ("D" | "d")
}

// Fixed-point currency values
// Symbols from [polyvalue::CurrencyInner]
currency_symbol = @{
    "$" | "¢" | "£" | "¤" | "¥" | "֏" | "؋" | "߾" | "߿" | "৲" | "৳" | "৻" | "૱" | "௹" | "฿" | "៛" | "₠" | "₡" |
    "₢" | "₣" | "₤" | "₥" | "₦" | "₧" | "₨" | "₩" | "₪" | "₫" | "€" | "₭" | "₮" | "₯" | "₰" | "₱" | "₲" | "₳" |
    "₴" | "₵" | "₶" | "₷" | "₸" | "₹" | "₺" | "₻" | "₼" | "₽" | "₾" | "₿" | "꠸" | "﷼" | "﹩" | "＄" | "￠" |
    "￡" | "￥" | "￦"
}
currency_suffix = @{
    "USD" | "US$" | "CAD" | "C$" | "AUD" | "A$" | "NZD" | "NZ$" | "HKD" | "HK$" | "SGD" | "S$" | "EUR" |
    "JPY" | "CNY" | "CN¥" | "GBP" | "NOK" | "kr" | "SEK" | "kr" | "DKK" | "kr" | "CHF" | "Fr." | "ISK" |
    "kr" | "CZK" | "Kč" | "HUF" | "Ft" | "PLN" | "zł" | "HRK" | "kn" | "RUB" | "TRY" | "BRL" | "R$" | "INR" |
    "IDR" | "Rp" | "ILS" | "ZAR" | "SAR" | "AED" | "KRW" | "VND" | "PHP" | "MXN" | "THB" | "MYR" | "RM" |
    "TWD" | "NT$" | "NGN" | "CLP" | "CL$" | "ARS" | "AR$" | "COP" | "CO$" | "PEN" | "S/." | "DOP" | "RD$"
}
currency_literal = {
    ((float_literal | int_literal) ~ currency_symbol) 
    | (currency_symbol ~ (float_literal | int_literal))
    | ((float_literal | int_literal) ~ currency_suffix)
}

// Floating-point literals
sci_literal = @{(float_literal | int_literal) ~ ^"e" ~ ("+"|"-")? ~ ('0'..'9')+}
float_literal = @{int_literal? ~ "." ~ ('0'..'9')+}

const_literal = @{"pi" | "e" | "tau"}

// Integer literals
int_comma = _{('0'..'9'){1,3} ~ ("," ~ ('0'..'9'){3})+}
int_literal = @{int_comma | ('0'..'9')+}
hex_literal = @{(^"0x") ~ ('a'..'f' | 'A'..'F' | '0'..'9')+}
bin_literal = @{(^"0b") ~ ('0'..'1')+}
oct_literal = @{(^"0o" | "0") ~ ('0'..'7')+}    

// Other literals
bool_literal = @{^"true" | ^"false"}
string_literal = @{("\"" ~ ("\\"~ANY | (!"\"" ~ ANY))* ~ "\"") | ("\'" ~ ("\\"~ANY | (!"\'" ~ ANY))* ~ "\'")}

regex_literal = @{
    "/" ~ (!"/" ~ ANY | "\\/")* ~ "/" ~ ("i" | "g" | "m" | "s" | "u" | "y")*
}

reserved_words = {
    "pi" | "e" | "tau" | "true" | "false" |
    "if" | "then" | "else" | "for" | "do" | "in" | "as"
    | DELETE_KEYWORD
    | MATCHING_OPERATOR
}
identifier = @{reserved_words? ~ ('a'..'z' | 'A'..'Z' | "_") ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")*}

//
// Error Definitions
//

errors = _{
    ERROR_UNTERMINATED_LITERAL | ERROR_UNTERMINATED_LINEBREAK | ERROR_UNTERMINATED_COMMENT
    | ERROR_UNTERMINATED_ARRAY | ERROR_UNTERMINATED_OBJECT | ERROR_UNTERMINATED_PAREN
    | ERROR_UNEXPECTED_DECORATOR
    | ERROR_INCOMPLETE_MATCHING_EXPRESSION
    | ERROR_INCOMPLETE_RANGE_EXPRESSION
}

ERROR_UNTERMINATED_LITERAL = @{("\"" ~ ("\\"~ANY | (!"\"" ~ ANY))*) | ("\'" ~ ("\\"~ANY | (!"\'" ~ ANY))*)}
ERROR_UNTERMINATED_LINEBREAK = @{"\\" ~ EOI}
ERROR_UNTERMINATED_COMMENT = @{"/*" ~ ANY*}

ERROR_UNTERMINATED_ARRAY = @{"[" ~ ANY*}
ERROR_UNTERMINATED_OBJECT = @{"{" ~ ANY*}
ERROR_UNTERMINATED_PAREN = @{"(" ~ ANY*}

ERROR_UNEXPECTED_DECORATOR = @{"@" ~ identifier ~ WHITESPACE* ~ (!WHITESPACE ~ !EOL ~ ANY)+ | SOI ~ "@" ~ ANY*}

ERROR_INCOMPLETE_MATCHING_EXPRESSION = @{ MATCHING_OPERATOR ~ ANY* }
ERROR_INCOMPLETE_RANGE_EXPRESSION = @{ ".." ~ ANY* }
