/*
 * This file contains implementations of the stdlib's math functions
 * for lavendeux, written in lavendish
 * 
 * This serves as a test-case of language features, 
 * and as a reference for the language
 *
 * Note that some functionality of the stdlib requires a bit of compiler magic, and so
 * implementations of those functions may differ slightly from the actual stdlib
 * For example, stdlib's assert will list the callsite of the assertion, while the one below
 * will show the location the throw() inside the assert function
 *
 * ╔══════════════════════════════════════════════════════════════════════════════════════╗
 * ║ Math                                                                                 ║
 * ╟──────────────────────────────────────────────────────────────────────────────────────╢
 * ║ abs(numeric) -> float : Returns the absolute value of a number                       ║
 * ║ ceil(numeric) -> float : Rounds a number up to the nearest integer                   ║
 * ║ floor(numeric) -> float : Rounds a number down to the nearest integer                ║
 * ║ ilog2(int) -> float : Returns the base 2 logarithm of an integer                     ║
 * ║ ln(numeric) -> float : Returns the natural logarithm of a number                     ║
 * ║ log(numeric, numeric) -> float : Returns the logarithm of a number with a given base ║
 * ║ log10(numeric) -> float : Returns the base 10 logarithm of a number                  ║
 * ║ log2(numeric) -> float : Returns the base 2 logarithm of a number                    ║
 * ║ max(compound) -> float : Returns the largest value in a set                          ║
 * ║ min(compound) -> float : Returns the smallest value in a set                         ║
 * ║ root(numeric, numeric) -> float : Returns the nth root of a number                   ║
 * ║ round(numeric, int) -> float : Rounds a number to a given precision                  ║
 * ║ sqrt(numeric) -> float : Returns the square root of a number                         ║
 * ╚══════════════════════════════════════════════════════════════════════════════════════╝
 */

// abs(numeric) -> float : Returns the absolute value of a number                      
_abs(n) = n < 0 ? -n : n
assert_eq(_abs(-1), 1)
assert_eq(_abs(1), 1)

// ceil(numeric) -> float : Rounds a number up to the nearest integer                  
_ceil(n) = (n % 1 == 0 ? n : n < 0 ? n - n % 1 : n - n % 1 + 1) as int
assert_eq(_ceil(1.1), 2)
assert_eq(_ceil(1.9), 2)
assert_eq(_ceil(-1.1), -1)
assert_eq(_ceil(-1.9), -1)

// floor(numeric) -> float : Rounds a number down to the nearest integer               
_floor(n) = (n % 1 == 0 ? n : n < 0 ? n - n % 1 - 1 : n - n % 1) as int
assert_eq(_floor(1.1), 1)
assert_eq(_floor(1.9), 1)
assert_eq(_floor(-1.1), -2)
assert_eq(_floor(-1.9), -2)


// max(compound) -> float : Returns the largest value in a set
_max(a) = {
    v = a[0]
    for i in a do {
        v = if i > v then {
            i
        } else {
            v
        }
    }
    v
}
assert_eq(_max([1, 2, 3]), 3)
assert_eq(_max([3, 2, 1]), 3)

// min(compound) -> float : Returns the smallest value in a set
_min(a) = {
    v = a[0]
    for i in a do {
        v = if i < v then {
            i
        } else {
            v
        }
    }
    v
}
assert_eq(_min([1, 2, 3]), 1)
assert_eq(_min([3, 2, 1]), 1)

// round(numeric, int) -> float : Rounds a number to a given precision
_round(n, p) = {
    m = 10 ** p
    _n = n * m
    _n = _n % 1 >= 0.5 ? _ceil(_n) : _floor(_n)
    (_n as float) / m
}
assert_eq(_round(1.123, 2), 1.12)
assert_eq(_round(1.125, 2), 1.13)
assert_eq(_round(1.123, 0), 1.0)
assert_eq(_round(1.5, 0), 2.0)