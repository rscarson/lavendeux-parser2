/*
 * This file contains implementations of the stdlib's bitwise functions
 * for lavendeux, written in lavendish
 * 
 * This serves as a test-case of language features, 
 * and as a reference for the language
 *
 * Note that some functionality of the stdlib requires a bit of compiler magic, and so
 * implementations of those functions may differ slightly from the actual stdlib
 * For example, stdlib's assert will list the callsite of the assertion, while the one below
 * will show the location the throw() inside the assert function
 *
 * ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
 * ║ Bitwise                                                                                                                  ║
 * ╟──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╢
 * ║ unsized_not(int) -> int : Bitwise NOT that attempts to remove the effect of the size of the integer (i.e. ~0xA0 == 0x0A) ║
 * ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
 */

__unsized_not(i) = {
    match typeof(i) {
        'u8' => 0xFFu8 & ~i,
        'u16' => 0xFFFFu16 & ~i,
        'u32' => 0xFFFFFFFFu32 & ~i,
        'u64' => 0xFFFFFFFFFFFFFFFFu64 & ~i,

        'i8' => 0xFFu64 & ~i,
        'i16' => 0xFFFFu64 & ~i,
        'i32' => 0xFFFFFFFFu64 & ~i,
        'i64' => 0xFFFFFFFFFFFFFFFFu64 & ~i,

        _ => throw("unsized_not: invalid type")
    }
}
assert_eq(__unsized_not(0x0Au8), 0xF5u8)
assert_eq(__unsized_not(0xF0u8), 0x0Fu8)
assert_eq(__unsized_not(0x0A0Au16), 0xF5F5u16)
