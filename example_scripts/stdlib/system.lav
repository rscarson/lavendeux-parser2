/*
 * This file contains implementations of the stdlib's core functions
 * for lavendeux, written in lavendish
 * 
 * This serves as a test-case of language features, 
 * and as a reference for the language
 *
 * Note that some functionality of the stdlib requires a bit of compiler magic, and so
 * implementations of those functions may differ slightly from the actual stdlib
 * For example, stdlib's assert will list the callsite of the assertion, while the one below
 * will show the location the throw() inside the assert function
 * 
 * ╔══════════════════════════════════════════════════════════════════════════════════════════════╗
 * ║ System                                                                                       ║
 * ╟──────────────────────────────────────────────────────────────────────────────────────────────╢
 * ║ add_extension(string) -> string : Adds a JavaScript extension to the interpreter             ║
 * ║ assert(any) -> any : Throws an error if the condition is false                               ║
 * ║ assert_eq(any, any) -> any : Throws an error if the two values are not equal                 ║
 * ║ assign(string, any) -> any : Assigns a variable in the current scope                         ║
 * ║ assign_global(string, any) -> any : Assigns a variable in the top-level scope                ║
 * ║ debug(string) -> any : Prints a debug message to the console                                 ║
 * ║ error(string) -> any : Throws an error with the given message                                ║
 * ║ eval(string) -> any : Evaluates a string as a Lavendeux expression and returns the result    ║
 * ║ eval_file(string) -> any : Evaluates a file as a Lavendeux expression and returns the result ║
 * ║ js(string) -> any : Executes a JavaScript expression and returns the result                  ║
 * ║ remove_extension(string) -> string : Removes a JavaScript extension from the interpreter     ║
 * ║ state() -> object : Returns the currently defined variables                                  ║
 * ║ throw(string) -> any : Throws an error with the given message                                ║
 * ║ typeof(any) -> string : Returns the type of its input                                        ║
 * ╚══════════════════════════════════════════════════════════════════════════════════════════════╝
 */



// assert(any) -> any : Throws an error if the condition is false          
__assert(cond) = cond ? cond : ("Assertion failed: " + cond).throw()

// assert_eq(any, any) -> any : Throws an error if the two values are not equal  
__assert_eq(a, b) = a == b ? a : ("Assertion failed: " + a + " != " + b).throw()     

// typeof(any) -> string : Returns the type of its input
__typeof(a) = {
    if a is bool then "bool"
    else if a is float then "float"
    else if a is fixed then "fixed"
    else if a is u8 then "u8"
    else if a is i8 then "i8"
    else if a is u16 then "u16"
    else if a is i16 then "i16"
    else if a is u32 then "u32"
    else if a is i32 then "i32"
    else if a is u64 then "u64"
    else if a is i64 then "i64"
    else if a is object then "object"
    else if a is array then "array"
    else if a is range then "range"
    else "undefined"
}
assert_eq(__typeof(1), "i64")
assert_eq(__typeof(1.0), "float")
assert_eq(__typeof(1.0f), "fixed")